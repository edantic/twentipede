#!/usr/bin/env make

# ------------------------------------------------------------------------------
#
# Makefile for managing this project.
#
# ------------------------------------------------------------------------------

#
# Make variables:
#

# Git information.
_git_commit = $(shell /usr/bin/git rev-parse --short HEAD 2> /dev/null || echo "none")
_git_url = https://github.com/edantic/twentipede

## Container image variables.

# Application variables.
_image_app_name = amazon-q-cli-dev
_image_app_desc = Amazon Q CLI development image
_image_app_version = 0.1.0

# Metadata about the container image build.
_image_build_base = registry.access.redhat.com/ubi9/ubi-minimal:9.6
_image_build_date = $(shell /bin/date "+%Y-%m-%dT%H:%M:%S%z")
_image_build_version = $(shell /usr/bin/uname -m)

# Directory containing Dockerfile to build.
_image_build_dir = container

# Image registry
_image_reg_server = ghcr.io
_image_reg_namespace = edantic

# Build the image version tag.
_image_tag = $(_image_app_version)-$(_image_build_version)

# Build the image name.
ifneq ($(_image_reg_server),)
_image_name = $(_image_reg_server)/$(_image_reg_namespace)/$(_image_app_name):$(_image_tag)
else
_image_name = $(_image_reg_namespace)/$(_image_app_name):$(_image_tag)
endif

# Construct the --build-args list to pass to the build command.
_image_build_args = \
	--build-arg "APP_NAME=$(_image_app_name)" \
	--build-arg "APP_DESC=$(_image_app_desc)" \
	--build-arg "APP_VERSION=$(_image_app_version)" \
	--build-arg "BASE_IMAGE=$(_image_build_base)" \
	--build-arg "BUILD_DATE=$(_image_build_date)" \
	--build-arg "GIT_COMMIT=$(_git_commit)" \
	--build-arg "GIT_URL=$(_git_url)"

container_cmd = /opt/podman/bin/podman


#
# Make targets:
#

# Print out help text by parsing for targets in the current Makefile. Discard
# targets that start with "." or "help".
#
.PHONY: help
help: .helptext
	@echo
	@echo "Make targets:"
	@grep -E "^[^\.]\S+:" $(MAKEFILE_LIST) \
		| cut -d: -f1 \
		| grep -Ev -e "^help" -e "^#" -e "^     " \
		| sort -u \
		| awk '{printf "    %s\n", $$1}'
	@echo
.PHONY: .helptext
.helptext:
	@echo
	@echo "Manage container image builds."
	@echo ""


# Clean up temporary artifacts.
.PHONY: clean
clean:
	@echo
	@date "+%X %x ===> Cleaning up temporary artifacts"
	find . -d -type d -name "*__pycache__" -exec rm -rf {} \;

# Build the container image.
.PHONY: container-build
container-build:
	@echo
	@date "+%X %x ===> Building container image: $(_image_name)"
	cd $(_image_build_dir) \
		&& $(container_cmd) build -t $(_image_name) $(_image_build_args) ./

# Just return the image name that would be generated by the build.
.PHONY: container-image-name
container-image-name:
	@echo $(_image_name)

# Just return the image name that would be generated by the build.
.PHONY: container-runit
container-runit:
	podman run -it --rm \
		--env USER_UID=$(shell /usr/bin/id -u) \
		--env USER_GID=$(shell /usr/bin/id -g) \
		--volume $(shell pwd):/mnt/develop \
		--workdir /mnt/develop \
		$(_image_name) bash
